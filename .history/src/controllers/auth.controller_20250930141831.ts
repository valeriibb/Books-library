// src/controllers/auth.controller.ts
import { Request, Response } from 'express';
// üí° –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∫–ª–∞—Å, –∞ –Ω–µ —Ñ—É–Ω–∫—Ü—ñ—ó
import { AuthService } from '../services/auth.service'; 
// –ú–∏ —Ç–∞–∫–æ–∂ –Ω–µ —ñ–º–ø–æ—Ä—Ç—É—î–º–æ refreshAuthTokens, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω —Ç–µ–ø–µ—Ä —î –º–µ—Ç–æ–¥–æ–º –∫–ª–∞—Å—É

// –°—Ç–≤–æ—Ä—é—î–º–æ —î–¥–∏–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤—ñ—Å—É –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —É—Å—ñ—Ö –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞—Ö
const authService = new AuthService();

// ------------------- –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø -------------------

export const register = async (req: Request, res: Response) => {
    try {
      const { email, password, firstName, lastName } = req.body;
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
      if (!email || !password || !firstName || !lastName) {
        return res.status(400).json({ error: 'Missing required fields' });
      }
  
      // üí° –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø: –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ registerUser –∑ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—É
      const result = await authService.registerUser({ email, password, firstName, lastName });
      
      // –í–∏–ª—É—á–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      const { password: _, ...userWithoutPass } = result.user;
  
      return res.status(201).json({
        user: userWithoutPass, 
        accessToken: result.accessToken,
        refreshToken: result.refreshToken,
      });
  
    } catch (error) {
      const message = error instanceof Error ? error.message : 'Registration failed';
      if (message.includes('already exists')) {
        return res.status(409).json({ error: 'User with this email already exists' });
      }
      console.error('Registration Error:', error);
      return res.status(500).json({ error: message });
    }
};

// ------------------- –í–•–Ü–î -------------------

export const login = async (req: Request, res: Response) => {
    try {
      const { email, password } = req.body;
      
      if (!email || !password) {
        return res.status(400).json({ error: 'Email and password are required' });
      }
  
      // üí° –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø: –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ loginUser –∑ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—É
      const result = await authService.loginUser(email, password);
      
      const { password: _, ...userWithoutPass } = result.user;
  
      return res.status(200).json({
        user: userWithoutPass, 
        accessToken: result.accessToken,
        refreshToken: result.refreshToken,
      });
      
    } catch (error) {
      const message = error instanceof Error ? error.message : 'Login failed';
      if (message.includes('Invalid credentials')) {
        return res.status(401).json({ error: 'Invalid email or password' });
      }
      console.error('Login Error:', error);
      return res.status(500).json({ error: message });
    }
};

// ------------------- –û–ù–û–í–õ–ï–ù–ù–Ø –¢–û–ö–ï–ù–Ü–í -------------------

export const refresh = async (req: Request, res: Response) => {
    try {
        const { refreshToken } = req.body; 

        if (!refreshToken) {
            return res.status(400).json({ error: 'Refresh Token is required' });
        }

        // üí° –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø: –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ refreshAuthTokens –∑ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—É
        const tokens = await authService.refreshAuthTokens(refreshToken);

        return res.status(200).json(tokens);
    } catch (error) {
        const message = error instanceof Error ? error.message : 'Refresh failed';
        return res.status(401).json({ error: message });
    }
};