// src/middleware/auth.middleware.ts
import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';

// üí° –í–∞–∂–ª–∏–≤–æ: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç–æ–π —Å–∞–º–∏–π —Å–µ–∫—Ä–µ—Ç, —â–æ –π —É auth.service.ts
const JWT_SECRET = process.env.JWT_SECRET || 'YOUR_UNSAFE_DEFAULT'; 

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Payload —Ç–æ–∫–µ–Ω–∞
interface AuthPayload {
    id: string;
    role: string;
}

export const authenticate = (req: Request, res: Response, next: NextFunction) => {
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    // üí° –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø TS7030
    return res.status(401).json({ error: 'Authorization token is required (Format: Bearer <token>)' });
  }

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–∞—î –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ: 'Bearer <TOKEN>'
  const token = authHeader.split(' ')[1]; 
  
  if (!token) {
    // üí° –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø TS7030
    return res.status(401).json({ error: 'Token missing from header' });
  }

  try {
    // 1. –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞
    const decoded = jwt.verify(token, JWT_SECRET) as AuthPayload;

    // 2. –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –æ–±'—î–∫—Ç–∞ –∑–∞–ø–∏—Ç—É (–¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è)
    // üí° –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø TS2339: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'as any', —â–æ–± TypeScript –Ω–µ —Å–≤–∞—Ä–∏–≤—Å—è.
    (req as any).user = decoded; 

    // 3. –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º—ñ–¥–ª–≤–µ—Ä—É –∞–±–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞
    next();
  } catch (error) {
    // –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–µ–∫—Ä–µ—Ç, –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó)
    // üí° –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø TS7030
    return res.status(401).json({ error: 'Invalid or expired Access Token' });
  }
};